{"version":3,"sources":["pages/BudgetPage/BudgetPage.module.scss","pages/BudgetInfo/BudgetInfo.module.scss","pages/Main/Main.module.scss","logo.svg","components/BudgetSteps/BudgetSteps.module.scss","components/ExportCSV.js","components/BudgetSteps/BudgetSteps.js","pages/BudgetPage/BudgetPage.js","pages/BudgetInfo/BudgetInfo.js","pages/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ExportCSV","csvData","fileName","getEachTypeSheet","data","sheets","forEach","pageObj","getPageData","sheetTotal","sheetData","push","pagename","label","total","sheetName","getChildren","htotal","headers","items","header","headerObj","childObj","name","quantity","rate","children","child","Number","parseInt","parseFloat","length","undefined","getOverviewSheet","arrData","esttotal","direct","pages","pageTotal","pageData","concat","toFixed","title","info","gross","type","onClick","e","convertedData","ws","XLSX","json_to_sheet","wb","book_new","book_append_sheet","years","Math","ceil","end","start","console","log","pageSheet","Custprops","Vendor","Project","project","Division","division","Grant","grant","Phone","phone","excelBuffer","bookType","Props","Author","contact","CreatedDate","Date","now","toString","Blob","FileSaver","exportToCSV","Step","Steps","BudgetSteps","props","direction","current","page","onChange","className","styles","stepsParent","icon","InfoCircleOutlined","UserOutlined","ToolOutlined","UsergroupAddOutlined","DollarOutlined","BankOutlined","Title","Typography","Text","TextArea","Input","EditableContext","React","createContext","EditableRow","index","Form","useForm","form","component","Provider","value","EditableCell","editable","dataIndex","record","handleSave","inputType","restProps","useState","editing","setEditing","inputRef","useRef","useContext","useEffect","focus","toggleEdit","setFieldsValue","save","a","validateFields","values","childNode","edit","Item","style","margin","rules","required","message","ref","onPressEnter","onBlur","paddingRight","Intl","NumberFormat","currency","format","map","el","reduce","accu","curr","strong","BudgetPage","handleDelete","key","newPageItems","findIndex","item","charAt","filter","dispatch","step","handleAdd","count","newData","String","fromCharCode","childCount","handleAddChild","pageItems","row","hIndex","splice","cIndex","handleComment","addWrapper","createRef","newObj","columnNames","Object","keys","columns","tocap","toUpperCase","slice","render","text","isNaN","acc","onConfirm","this","components","body","cell","col","onCell","content","pageTitle","marginTop","marginBottom","rowClassName","bordered","dataSource","expandable","expandRowByClick","pagination","hideOnSinglePage","summary","subsections","c","fullFringe","ftfringe","partFringe","ptfringe","Summary","Row","Cell","colSpan","fontWeight","comments","val","comment","target","Component","RangePicker","DatePicker","formItemLayout","labelCol","xs","sm","md","lg","xl","xxl","wrapperCol","span","percentFormatter","BudgetInfo","payload","initialValues","infoData","range","moment","unix","faoff","faon","raise","Group","Button","formatter","min","max","Content","Layout","Main","pull","textAlign","align","Header","defaultData","require","reducer","state","action","newPages","commentPages","newInfo","entries","Error","App","setStep","localState","JSON","parse","localStorage","getItem","useReducer","setItem","stringify","position","zIndex","width","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.d15d1be7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"BudgetPage_content__2lFbs\",\"pageTitle\":\"BudgetPage_pageTitle__3pfXV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"BudgetInfo_content__27obA\",\"pageTitle\":\"BudgetInfo_pageTitle__VDZRj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Main_row__O0Ybk\",\"col\":\"Main_col__3wFmk\"};","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stepsParent\":\"BudgetSteps_stepsParent__CZ_V4\"};","import React from \"react\";\nimport { Button } from \"antd\";\nimport * as FileSaver from \"file-saver\";\nimport * as XLSX from \"xlsx\";\n\nconst ExportCSV = ({ csvData, fileName }) => {\n    const fileType =\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n    const fileExtension = \".xlsx\";\n\n    // TODO: format the excel to look nice\n\n    const exportToCSV = (csvData, fileName) => {\n        const convertedData = getOverviewSheet(csvData);\n        const ws = XLSX.utils.json_to_sheet(convertedData);\n        let wb = XLSX.utils.book_new();\n        XLSX.utils.book_append_sheet(wb, ws, \"Overview\");\n\n        // (start.unix - end.unix)/UNIX_YEAR = diff in years\n        const years = Math.ceil((csvData.info.end - csvData.info.start) / 31557600);\n        console.log(years);\n        const detailedSheets = getEachTypeSheet(csvData.pages);\n        detailedSheets.forEach(({ sheetName, sheetData }) => {\n            const pageSheet = XLSX.utils.json_to_sheet(sheetData);\n            XLSX.utils.book_append_sheet(wb, pageSheet, sheetName);\n        });\n\n        wb.Custprops = {\n            Vendor: csvData.info.name,\n            Project: csvData.info.project,\n            Division: csvData.info.division,\n            \"Start Date\": csvData.info.start,\n            \"End Date\": csvData.info.end,\n            Grant: csvData.info.grant,\n            Phone: csvData.info.phone,\n        };\n\n        const excelBuffer = XLSX.write(wb, {\n            bookType: \"xlsx\",\n            type: \"array\",\n            Props: {\n                Author: csvData.info.contact,\n                CreatedDate: Date.now().toString(),\n            },\n        });\n        const data = new Blob([excelBuffer], { type: fileType });\n        FileSaver.saveAs(data, fileName + fileExtension);\n    };\n\n    const getEachTypeSheet = (data) => {\n        let sheets = [];\n        data.forEach((pageObj) => {\n            let [sheetTotal, sheetData] = getPageData(pageObj, true);\n            sheetData.push({ pagename: `Total ${pageObj.label}`, total: sheetTotal });\n            sheets.push({\n                sheetName: pageObj.label,\n                sheetData: sheetData,\n            });\n        });\n        return sheets;\n    };\n\n    const getPageData = (pageObj, getChildren) => {\n        let htotal = 0;\n        let headers = [];\n        pageObj.items.forEach((header) => {\n            let headerObj;\n            if (getChildren) headerObj = { pagename: `Total ${header.name}` };\n            else headerObj = { pagename: header.name };\n            let childObj;\n            headerObj.quantity = 0;\n            headerObj.rate = 0;\n            headerObj.total = 0;\n            header.children.forEach((child) => {\n                childObj = {\n                    pagename: child.name,\n                    quantity: child.quantity,\n                    rate: child.rate,\n                    total:\n                        Number.parseInt(child.quantity) * Number.parseFloat(child.rate),\n                };\n                headerObj.quantity += Number.parseInt(child.quantity);\n                headerObj.rate += Number.parseFloat(child.rate);\n                headerObj.total += childObj.total;\n            });\n\n            if (header.children.length > 0) {\n                headerObj.rate = headerObj.rate / header.children.length;\n            }\n            htotal += headerObj.total;\n            if (getChildren && childObj !== undefined) {\n                headers.push([], childObj);\n            }\n            headers.push(headerObj);\n        });\n        return [htotal, headers];\n    };\n\n    const getOverviewSheet = (data) => {\n        let arrData = [[]];\n        let esttotal = 0;\n        let direct = 0;\n        data.pages.forEach((pageObj) => {\n            arrData.push([], { pagename: pageObj.label });\n            const [pageTotal, pageData] = getPageData(pageObj, false);\n            arrData = arrData.concat(pageData);\n            arrData.push({\n                pagename: `Total ${pageObj.label}`,\n                total: pageTotal.toFixed(2),\n            });\n            arrData.push([]);\n            esttotal += pageTotal;\n            if (pageObj.title !== \"overhead\") direct += pageTotal;\n        });\n        arrData.push(\n            [],\n            {\n                pagename: \"Total Estimated - Before Margin\",\n                total: esttotal.toFixed(2),\n            },\n            {\n                pagename: \"Direct Costs (Budget Use Only)\",\n                total: direct.toFixed(2),\n            },\n            {\n                pagename: \"Gross Margin (Market Based)\",\n                total: (data.info.gross * esttotal).toFixed(2),\n            },\n            [],\n            {\n                pagename: \"Total Estimated Price\",\n                total: (data.info.gross * esttotal + esttotal).toFixed(2),\n            }\n        );\n        return arrData;\n    };\n\n    return (\n        <Button type=\"primary\" onClick={(e) => exportToCSV(csvData, fileName)}>\n            Export\n        </Button>\n    );\n};\n\nexport default ExportCSV;\n","import React from \"react\";\nimport { Steps } from \"antd\";\nimport {\n    UserOutlined,\n    ToolOutlined,\n    UsergroupAddOutlined,\n    DollarOutlined,\n    BankOutlined,\n    InfoCircleOutlined,\n} from \"@ant-design/icons\";\nimport styles from \"./BudgetSteps.module.scss\";\n\nconst { Step } = Steps;\n\nexport default function BudgetSteps(props) {\n    return (\n        <Steps\n            direction=\"vertical\"\n            current={props.page}\n            onChange={props.onChange}\n            className={styles.stepsParent}\n        >\n            <Step title=\"Information\" icon={<InfoCircleOutlined />} />\n            <Step title=\"Labor\" icon={<UserOutlined />} />\n            <Step title=\"Equiptment and Supplies\" icon={<ToolOutlined />} />\n            <Step title=\"Consultants\" icon={<UsergroupAddOutlined />} />\n            <Step title=\"Non-Personnel Expenses\" icon={<DollarOutlined />} />\n            <Step title=\"Overhead\" icon={<BankOutlined />} />\n        </Steps>\n    );\n}\n","import React, { Component, useContext, useState, useEffect, useRef } from \"react\";\nimport styles from \"./BudgetPage.module.scss\";\n\nimport { Table, Input, InputNumber, Popconfirm, Form, Button, Typography } from \"antd\";\nconst { Title, Text } = Typography;\nconst { TextArea } = Input;\n\nconst capitalize = (tocap) => tocap.charAt(0).toUpperCase() + tocap.slice(1);\n\nconst EditableContext = React.createContext();\n\nconst EditableRow = ({ index, ...props }) => {\n    const [form] = Form.useForm();\n    return (\n        <Form form={form} component={false}>\n            <EditableContext.Provider value={form}>\n                <tr {...props} />\n            </EditableContext.Provider>\n        </Form>\n    );\n};\n\nconst EditableCell = ({\n    title,\n    editable,\n    children,\n    dataIndex,\n    record,\n    handleSave,\n    inputType,\n    ...restProps\n}) => {\n    const [editing, setEditing] = useState(false);\n    const inputRef = useRef();\n    const form = useContext(EditableContext);\n    useEffect(() => {\n        if (editing) {\n            inputRef.current.focus();\n        }\n    }, [editing]);\n\n    const toggleEdit = () => {\n        setEditing(!editing);\n        form.setFieldsValue({\n            [dataIndex]: record[dataIndex],\n        });\n    };\n\n    const save = async (e) => {\n        try {\n            const values = await form.validateFields();\n            toggleEdit();\n            handleSave({ ...record, ...values });\n        } catch (errInfo) {\n            console.log(\"Save failed:\", errInfo);\n        }\n    };\n\n    let childNode = children;\n\n    if (editable && (!record.header || (record.edit && dataIndex === \"name\"))) {\n        childNode = editing ? (\n            <Form.Item\n                style={{\n                    margin: 0,\n                }}\n                name={dataIndex}\n                rules={[\n                    {\n                        required: true,\n                        message: `${title} is required.`,\n                    },\n                ]}\n            >\n                {inputType === \"number\" ? (\n                    <InputNumber ref={inputRef} onPressEnter={save} onBlur={save} />\n                ) : (\n                    <Input ref={inputRef} onPressEnter={save} onBlur={save} />\n                )}\n            </Form.Item>\n        ) : (\n            <div\n                className=\"editable-cell-value-wrap\"\n                style={{\n                    paddingRight: 24,\n                }}\n                onClick={toggleEdit}\n            >\n                {dataIndex === \"rate\"\n                    ? new Intl.NumberFormat(\"en-US\", {\n                          style: \"currency\",\n                          currency: \"USD\",\n                      }).format(Number.parseFloat(children[1]))\n                    : children}\n            </div>\n        );\n    } else if (\n        record &&\n        record.header &&\n        record.children.length > 0 &&\n        dataIndex === \"rate\"\n    ) {\n        const total = record.children\n            .map((el) => Number.parseFloat(el[dataIndex]))\n            .reduce((accu, curr) => accu + curr);\n        childNode = (\n            <Text strong>\n                {new Intl.NumberFormat(\"en-US\", {\n                    style: \"currency\",\n                    currency: \"USD\",\n                }).format(total / record.children.length)}\n            </Text>\n        );\n    } else if (\n        record &&\n        record.header &&\n        record.children.length > 0 &&\n        (dataIndex === \"quantity\" || dataIndex === \"total\")\n    ) {\n        const total = record.children\n            .map((el) => Number.parseFloat(el[dataIndex]))\n            .reduce((accu, curr) => accu + curr);\n        childNode = <Text strong>{total}</Text>;\n    }\n\n    return <td {...restProps}>{childNode}</td>;\n};\n\nexport default class BudgetPage extends Component {\n    constructor(props) {\n        super(props);\n        this.addWrapper = React.createRef();\n\n        let newObj = this.props.pageData.items[0];\n        const columnNames = Object.keys(newObj).filter(\n            (key) =>\n                key !== \"key\" &&\n                key !== \"children\" &&\n                key !== \"header\" &&\n                key !== \"childCount\"\n        );\n        this.columns = columnNames.map((key) => ({\n            title: capitalize(key),\n            dataIndex: key,\n            inputType: key === \"name\" ? \"text\" : \"number\",\n            editable: true,\n            key: key,\n        }));\n        this.columns.push(\n            {\n                title: \"Total\",\n                dataIndex: \"total\",\n                render: (text, record) => {\n                    if (!record.header) {\n                        let total =\n                            Number.parseInt(record.quantity) *\n                            Number.parseFloat(record.rate);\n                        if (isNaN(total)) total = 0;\n                        return new Intl.NumberFormat(\"en-US\", {\n                            style: \"currency\",\n                            currency: \"USD\",\n                        }).format(total);\n                    } else {\n                        let total = record.children\n                            .map((el) => {\n                                if (\n                                    !isNaN(Number.parseInt(el.quantity)) &&\n                                    !isNaN(Number.parseFloat(el.rate))\n                                ) {\n                                    return (\n                                        Number.parseInt(el.quantity) *\n                                        Number.parseFloat(el.rate)\n                                    );\n                                } else return 0;\n                            })\n                            .reduce((acc, curr) => acc + curr, 0);\n                        return (\n                            <Text strong>\n                                {new Intl.NumberFormat(\"en-US\", {\n                                    style: \"currency\",\n                                    currency: \"USD\",\n                                }).format(total)}\n                            </Text>\n                        );\n                    }\n                },\n            },\n            {\n                title: \"operation\",\n                dataIndex: \"operation\",\n                render: (text, record) =>\n                    this.props.pageData.items.length >= 1 ? (\n                        <>\n                            {record.header ? (\n                                <Button\n                                    type=\"link\"\n                                    onClick={() => this.handleAddChild(record.key)}\n                                >\n                                    Add\n                                </Button>\n                            ) : (\n                                <Popconfirm\n                                    title=\"Sure to delete?\"\n                                    onConfirm={() => this.handleDelete(record.key)}\n                                >\n                                    <Button type=\"link\">Delete</Button>\n                                </Popconfirm>\n                            )}\n                            {record.edit !== undefined && record.edit && (\n                                <Popconfirm\n                                    title=\"Sure to delete?\"\n                                    onConfirm={() => this.handleDelete(record.key)}\n                                >\n                                    <Button type=\"link\">Delete</Button>\n                                </Popconfirm>\n                            )}\n                        </>\n                    ) : null,\n            }\n        );\n    }\n\n    // Only drawback is that you can only have at most 26 main sections per page\n    // keys are: section is [a-z] and subsection is matching [a-z] with [0-9]+ appended\n    handleDelete = (key) => {\n        let newPageItems = this.props.pageData.items;\n        const index = newPageItems.findIndex((item) => item.key === key.charAt(0));\n        if (key.length > 1)\n            newPageItems[index].children = newPageItems[index].children.filter(\n                (item) => item.key !== key\n            );\n        else newPageItems = newPageItems.filter((item) => item.key !== key);\n        // this.props.setPageData(newPageItems);\n        this.props.dispatch({\n            type: \"page\",\n            step: this.props.step,\n            pageData: newPageItems,\n        });\n    };\n\n    handleAdd = () => {\n        const { pageData } = this.props;\n        const count = pageData.items.length + 1;\n        const newData = {\n            key: String.fromCharCode(96 + count),\n            name: `${pageData.label} Item ${count}`,\n            quantity: null,\n            rate: null,\n            header: true,\n            edit: true,\n            childCount: 0,\n            children: [],\n        };\n        // this.props.setPageData([...pageData.items, newData]);\n        this.props.dispatch({\n            type: \"page\",\n            step: this.props.step,\n            pageData: [...pageData.items, newData],\n        });\n    };\n\n    handleAddChild = (key) => {\n        const pageItems = this.props.pageData.items;\n        const index = pageItems.findIndex((item) => item.key === key);\n        if (index < 0) {\n            return;\n        }\n        const count = pageItems[index].childCount + 1;\n        pageItems[index].childCount = count;\n        pageItems[index].children.push({\n            key: key + count,\n            name: `Item ${count}`,\n            quantity: 0,\n            rate: 0,\n            header: false,\n        });\n        //this.props.setPageData(pageItems);\n        this.props.dispatch({ type: \"page\", step: this.props.step, pageData: pageItems });\n    };\n\n    handleSave = (row) => {\n        const newData = [...this.props.pageData.items];\n        const hIndex = newData.findIndex((item) => row.key.charAt(0) === item.key);\n        const item = newData[hIndex];\n        if (row.header === undefined || !row.header) {\n            const cIndex = newData[hIndex].children.findIndex(\n                (item) => row.key === item.key\n            );\n            const child = newData[hIndex].children[cIndex];\n            newData[hIndex].children.splice(cIndex, 1, {\n                ...child,\n                ...row,\n            });\n        } else {\n            newData.splice(hIndex, 1, { ...item, ...row });\n        }\n        // this.props.setPageData(newData);\n        this.props.dispatch({ type: \"page\", step: this.props.step, pageData: newData });\n    };\n\n    handleComment = async () => {};\n\n    render() {\n        const { pageData } = this.props;\n        const components = {\n            body: {\n                row: EditableRow,\n                cell: EditableCell,\n            },\n        };\n        const columns = this.columns.map((col) => {\n            if (!col.editable) {\n                return col;\n            }\n\n            return {\n                ...col,\n                onCell: (record) => ({\n                    record,\n                    editable: col.editable,\n                    dataIndex: col.dataIndex,\n                    title: col.title,\n                    inputType: col.inputType,\n                    handleSave: this.handleSave,\n                }),\n            };\n        });\n        return (\n            <div className={styles.content}>\n                <Title className={styles.pageTitle}>{this.props.pageData.label}</Title>\n                <Button\n                    onClick={this.handleAdd}\n                    type=\"primary\"\n                    style={{\n                        marginTop: 24,\n                        marginBottom: 16,\n                    }}\n                    ref={this.addWrapper}\n                >\n                    Add a Section\n                </Button>\n                <Table\n                    components={components}\n                    rowClassName={() => \"editable-row\"}\n                    bordered\n                    dataSource={pageData.items}\n                    columns={columns}\n                    expandable={{\n                        expandRowByClick: true,\n                    }}\n                    pagination={{ hideOnSinglePage: true }}\n                    summary={(pageData) => {\n                        const subsections = pageData.map((el) =>\n                            el.children\n                                .map(\n                                    (c) =>\n                                        Number.parseInt(c.quantity) *\n                                        Number.parseFloat(c.rate)\n                                )\n                                .reduce((acc, curr) => acc + curr, 0)\n                        );\n                        let total = subsections.reduce((acc, curr) => acc + curr, 0);\n                        const fullFringe = this.props.info.ftfringe;\n                        const partFringe = this.props.info.ptfringe;\n                        if (pageData[0].name === \"Full Time Personnel\")\n                            total +=\n                                subsections[0] * (fullFringe / 100) +\n                                subsections[1] * (partFringe / 100);\n                        return (\n                            <>\n                                {pageData[0].name === \"Full Time Personnel\" && (\n                                    <>\n                                        <Table.Summary.Row>\n                                            <Table.Summary.Cell colSpan={2}>\n                                                <Text>Composite Fringes - FT</Text>\n                                            </Table.Summary.Cell>\n                                            <Table.Summary.Cell>\n                                                {fullFringe}%\n                                            </Table.Summary.Cell>\n                                            <Table.Summary.Cell>\n                                                <Text style={{ fontWeight: \"bold\" }}>\n                                                    {new Intl.NumberFormat(\"en-US\", {\n                                                        style: \"currency\",\n                                                        currency: \"USD\",\n                                                    }).format(\n                                                        subsections[0] *\n                                                            (fullFringe / 100)\n                                                    )}\n                                                </Text>\n                                            </Table.Summary.Cell>\n                                        </Table.Summary.Row>\n                                        <Table.Summary.Row>\n                                            <Table.Summary.Cell colSpan={2}>\n                                                <Text>Composite Fringes - PT</Text>\n                                            </Table.Summary.Cell>\n                                            <Table.Summary.Cell>\n                                                {partFringe}%\n                                            </Table.Summary.Cell>\n                                            <Table.Summary.Cell>\n                                                <Text style={{ fontWeight: \"bold\" }}>\n                                                    {new Intl.NumberFormat(\"en-US\", {\n                                                        style: \"currency\",\n                                                        currency: \"USD\",\n                                                    }).format(\n                                                        subsections[1] *\n                                                            (partFringe / 100)\n                                                    )}\n                                                </Text>\n                                            </Table.Summary.Cell>\n                                        </Table.Summary.Row>\n                                    </>\n                                )}\n                                <Table.Summary.Row>\n                                    <Table.Summary.Cell colSpan={3}>\n                                        Total\n                                    </Table.Summary.Cell>\n                                    <Table.Summary.Cell>\n                                        <Text\n                                            style={{\n                                                fontWeight: \"bolder\",\n                                            }}\n                                        >\n                                            {new Intl.NumberFormat(\"en-US\", {\n                                                style: \"currency\",\n                                                currency: \"USD\",\n                                            }).format(total)}\n                                        </Text>\n                                    </Table.Summary.Cell>\n                                </Table.Summary.Row>\n                            </>\n                        );\n                    }}\n                />\n                <Form.Item style={{ margin: \"2rem\" }} label=\"Comments\">\n                    <TextArea\n                        value={this.props.pageData.comments}\n                        onChange={(val) => {\n                            this.props.dispatch({\n                                type: \"comment\",\n                                comment: val.target.value,\n                                step: this.props.step,\n                            });\n                        }}\n                    />\n                </Form.Item>\n            </div>\n        );\n    }\n}\n","import React from \"react\";\nimport styles from \"./BudgetInfo.module.scss\";\n\nimport { Typography, Form, DatePicker, Input, InputNumber, Radio, Col, Row } from \"antd\";\nimport moment from \"moment\";\n\nconst { Title } = Typography;\nconst { RangePicker } = DatePicker;\n\nconst formItemLayout = {\n    labelCol: { xs: 16, sm: 14, md: 12, lg: 8, xl: 6, xxl: 4 },\n    wrapperCol: { span: 16 },\n};\nconst dateFormat = \"MM/DD/YYYY\";\nconst percentFormatter = (value) => `${value}%`;\n\nexport default function BudgetInfo(props) {\n    const save = async () => {\n        const values = await props.form.validateFields();\n        props.dispatch({ type: \"info\", payload: values });\n    };\n    return (\n        <div className={styles.content}>\n            <Title className={styles.pageTitle}>Information</Title>\n            <Form\n                form={props.form}\n                {...formItemLayout}\n                initialValues={{\n                    name: props.infoData.name,\n                    project: props.infoData.project,\n                    division: props.infoData.division,\n                    range:\n                        props.infoData.start && props.infoData.end\n                            ? [\n                                  moment.unix(props.infoData.start),\n                                  moment.unix(props.infoData.end),\n                              ]\n                            : null,\n                    grant: props.infoData.grant,\n                    contact: props.infoData.contact,\n                    phone: props.infoData.phone,\n                    faoff: props.infoData.faoff,\n                    faon: props.infoData.faon,\n                    gross: props.infoData.gross,\n                    ftfringe: props.infoData.ftfringe,\n                    ptfringe: props.infoData.ptfringe,\n                    raise: props.infoData.raise,\n                }}\n            >\n                <Form.Item name=\"name\" label=\"Vendor/Contractor Name\">\n                    <Input onPressEnter={save} onBlur={save} />\n                </Form.Item>\n                <Form.Item name=\"project\" label=\"Project Name\">\n                    <Input onPressEnter={save} onBlur={save} />\n                </Form.Item>\n                <Form.Item name=\"division\" label=\"Division Name\">\n                    <Input onPressEnter={save} onBlur={save} />\n                </Form.Item>\n                <Form.Item name=\"range\" label=\"Project Period\">\n                    <RangePicker onChange={save} format={dateFormat} />\n                </Form.Item>\n                <Form.Item name=\"grant\" label=\"Grant or Non-Grant\">\n                    <Radio.Group>\n                        <Radio.Button value={true}>Grant</Radio.Button>\n                        <Radio.Button value={false}>Non Grant</Radio.Button>\n                    </Radio.Group>\n                </Form.Item>\n                <Form.Item name=\"contact\" label=\"Contact Name\">\n                    <Input onPressEnter={save} onBlur={save} />\n                </Form.Item>\n                <Form.Item name=\"phone\" label=\"Phone Number\">\n                    <Input type=\"tel\" onPressEnter={save} onBlur={save} />\n                </Form.Item>\n                <Row>\n                    <Col span={8}>\n                        <Form.Item\n                            name=\"faoff\"\n                            label=\"F&A Rate Off-Site\"\n                            labelCol={{ span: 14 }}\n                        >\n                            <InputNumber\n                                formatter={percentFormatter}\n                                onPressEnter={save}\n                                onBlur={save}\n                                min={0}\n                            />\n                        </Form.Item>\n                    </Col>\n                    <Col span={8}>\n                        <Form.Item\n                            name=\"faon\"\n                            label=\"F&A Rate On-Site\"\n                            labelCol={{ span: 14 }}\n                        >\n                            <InputNumber\n                                formatter={percentFormatter}\n                                onPressEnter={save}\n                                onBlur={save}\n                                min={0}\n                            />\n                        </Form.Item>\n                    </Col>\n                    <Col span={8}>\n                        <Form.Item\n                            name=\"gross\"\n                            label=\"Gross Margin\"\n                            labelCol={{ span: 14 }}\n                        >\n                            <InputNumber\n                                formatter={percentFormatter}\n                                onPressEnter={save}\n                                onBlur={save}\n                                min={0}\n                            />\n                        </Form.Item>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col span={8}>\n                        <Form.Item\n                            name=\"ftfringe\"\n                            label=\"Composite Fringes - FT\"\n                            labelCol={{ span: 15 }}\n                        >\n                            <InputNumber\n                                formatter={percentFormatter}\n                                onPressEnter={save}\n                                onBlur={save}\n                                min={0}\n                                max={100}\n                            />\n                        </Form.Item>\n                    </Col>\n                    <Col span={8}>\n                        <Form.Item\n                            name=\"ptfringe\"\n                            label=\"Composite Fringes - PT\"\n                            labelCol={{ span: 15 }}\n                        >\n                            <InputNumber\n                                formatter={percentFormatter}\n                                onPressEnter={save}\n                                onBlur={save}\n                                min={0}\n                                max={100}\n                            />\n                        </Form.Item>\n                    </Col>\n                    <Col span={8}>\n                        <Form.Item\n                            name=\"raise\"\n                            label=\"Yearly Wage Raise\"\n                            labelCol={{ span: 15 }}\n                        >\n                            <InputNumber\n                                formatter={percentFormatter}\n                                onPressEnter={save}\n                                onBlur={save}\n                                min={0}\n                                max={100}\n                            />\n                        </Form.Item>\n                    </Col>\n                </Row>\n            </Form>\n        </div>\n    );\n}\n","import React from \"react\";\n\nimport ExportCSV from \"../../components/ExportCSV\";\nimport BudgetSteps from \"../../components/BudgetSteps\";\nimport BudgetPage from \"../BudgetPage\";\nimport BudgetInfo from \"../BudgetInfo\";\n\nimport styles from \"./Main.module.scss\";\nimport { Layout, Col, Row, Button, Space, Popconfirm } from \"antd\";\nconst { Content } = Layout;\n\nexport default function Main(props) {\n    return (\n        <Content>\n            <Row className={styles.row}>\n                <Col span={5} pull={5} className={styles.col}>\n                    <BudgetSteps onChange={props.onChange} page={props.step} />\n                    <div style={{ textAlign: \"center\" }}>\n                        <Space align=\"center\" style={{ marginBottom: \"3rem\" }}>\n                            <ExportCSV\n                                csvData={props.data}\n                                fileName={\"Pricing and Budget\"}\n                            />\n                            <Popconfirm\n                                title=\"Sure to reset?\"\n                                onConfirm={() => props.dispatch({ type: \"reset\" })}\n                            >\n                                <Button type=\"ghost\">Reset</Button>\n                            </Popconfirm>\n                        </Space>\n                    </div>\n                </Col>\n                <Col span={19} push={5}>\n                    {props.step === 0 ? (\n                        <BudgetInfo\n                            dispatch={props.dispatch}\n                            infoData={props.data.info}\n                            form={props.form}\n                        />\n                    ) : (\n                        <BudgetPage\n                            pageData={props.data.pages[props.step - 1]}\n                            info={props.data.info}\n                            step={props.step - 1}\n                            dispatch={props.dispatch}\n                        />\n                    )}\n                </Col>\n            </Row>\n        </Content>\n    );\n}\n","import React, { useState, useEffect, useReducer } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport Main from \"./pages/Main\";\nimport { Layout, Form } from \"antd\";\nconst { Header } = Layout;\n\nlet defaultData = require(\"./utils/default.json\");\n\nfunction reducer(state, action) {\n    switch (action.type) {\n        case \"page\": // action = {step, pageData}\n            const newPages = [...state.pages];\n            newPages[action.step].items = action.pageData;\n            return { ...state, pages: newPages };\n        case \"comment\": // action = {step, comment}\n            const commentPages = [...state.pages];\n            commentPages[action.step].comments = action.comment;\n            return {\n                ...state,\n                pages: commentPages,\n            };\n        case \"info\": // action = {dataItem, infoData}\n            let newInfo = state.info;\n            for (const [key, value] of Object.entries(action.payload)) {\n                if (value === undefined || value === null) continue;\n                if (key === \"range\") {\n                    const [start, end] = value;\n                    newInfo.start = start.unix();\n                    newInfo.end = end.unix();\n                } else {\n                    newInfo[key] = value;\n                }\n            }\n            return { ...state, info: newInfo };\n        case \"reset\":\n            return defaultData;\n        default:\n            throw new Error(\"Action of unknown type.\");\n    }\n}\n\n// TODO: change to useReducer and create reducer function\nfunction App() {\n    const [form] = Form.useForm();\n    const [step, setStep] = useState(0);\n    const onChange = (current) => setStep(current);\n    const localState = JSON.parse(localStorage.getItem(\"VLProjectBudget\")) || defaultData;\n    const [data, dispatch] = useReducer(reducer, localState || defaultData);\n    useEffect(() => {\n        form.setFieldsValue(data.info);\n        localStorage.setItem(\"VLProjectBudget\", JSON.stringify(data));\n    }, [data, form]);\n\n    if (!data.info || !data.pages) {\n        dispatch({ type: \"reset\" });\n    }\n    return (\n        <Layout>\n            <Header\n                style={{\n                    position: \"fixed\",\n                    zIndex: 2,\n                    width: \"100%\",\n                    textAlign: \"center\",\n                }}\n            >\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            </Header>\n            <Layout>\n                <Main\n                    form={form}\n                    step={step}\n                    data={data}\n                    dispatch={dispatch}\n                    onChange={onChange}\n                />\n            </Layout>\n        </Layout>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}