{"version":3,"sources":["logo.svg","components/BudgetSteps/BudgetSteps.module.scss","pages/BudgetPage/BudgetPage.module.scss","pages/Main/Main.module.scss","components/ExportCSV.js","components/BudgetSteps/BudgetSteps.js","pages/BudgetPage/BudgetPage.js","pages/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ExportCSV","csvData","fileName","type","onClick","e","wb","Sheets","data","XLSX","json_to_sheet","SheetNames","excelBuffer","bookType","Blob","FileSaver","exportToCSV","Step","Steps","BudgetSteps","props","direction","current","page","onChange","className","styles","stepsParent","title","icon","UserOutlined","ToolOutlined","UsergroupAddOutlined","DollarOutlined","BankOutlined","EditableCell","editing","dataIndex","inputType","children","record","index","restProps","inputNode","Item","name","style","margin","rules","required","message","BudgetPage","console","log","step","newObj","items","columnNames","Object","keys","filter","key","columns","map","tocap","charAt","toUpperCase","slice","Form","useForm","form","useState","editingKey","setEditingKey","columnFieldsValues","forEach","cancel","save","a","validateFields","row","newData","findIndex","item","splice","setData","push","render","_","isEditing","marginRight","onConfirm","disabled","setFieldsValue","edit","content","label","component","components","body","cell","bordered","dataSource","summary","Content","Layout","Main","span","pull","height","position","left","backgroundColor","top","zIndex","minWidth","textAlign","length","Header","defaultData","require","App","setStep","storageKey","JSON","parse","sessionStorage","getItem","useEffect","stringData","stringify","setItem","useSessionState","width","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.83ca73e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"stepsParent\":\"BudgetSteps_stepsParent__CZ_V4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"content\":\"BudgetPage_content__2lFbs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"row\":\"Main_row__O0Ybk\"};","import React from \"react\";\nimport { Button } from \"antd\";\nimport * as FileSaver from \"file-saver\";\nimport * as XLSX from \"xlsx\";\n\nconst ExportCSV = ({ csvData, fileName }) => {\n    const fileType =\n        \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n    const fileExtension = \".xlsx\";\n\n    const exportToCSV = (csvData, fileName) => {\n        const ws = XLSX.utils.json_to_sheet(csvData);\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\n        const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\n        const data = new Blob([excelBuffer], { type: fileType });\n        FileSaver.saveAs(data, fileName + fileExtension);\n    };\n\n    return (\n        <Button type=\"primary\" onClick={(e) => exportToCSV(csvData, fileName)}>\n            Export\n        </Button>\n    );\n};\n\nexport default ExportCSV;\n","import React from \"react\";\nimport { Steps } from \"antd\";\nimport {\n    UserOutlined,\n    ToolOutlined,\n    UsergroupAddOutlined,\n    DollarOutlined,\n    BankOutlined,\n} from \"@ant-design/icons\";\nimport styles from \"./BudgetSteps.module.scss\";\n\nconst { Step } = Steps;\n\nexport default function BudgetSteps(props) {\n    return (\n        <Steps\n            direction=\"vertical\"\n            current={props.page}\n            onChange={props.onChange}\n            className={styles.stepsParent}\n        >\n            <Step title=\"Labor\" icon={<UserOutlined />} />\n            <Step title=\"Equiptment and Supplies\" icon={<ToolOutlined />} />\n            <Step title=\"Consultants\" icon={<UsergroupAddOutlined />} />\n            <Step title=\"Non-Personnel Expenses\" icon={<DollarOutlined />} />\n            <Step title=\"Overhead\" icon={<BankOutlined />} />\n        </Steps>\n    );\n}\n","import React, { useState } from \"react\";\nimport styles from \"./BudgetPage.module.scss\";\n\nimport { Table, Input, InputNumber, Popconfirm, Form, Button } from \"antd\";\n\nconst capitalize = (tocap) => tocap.charAt(0).toUpperCase() + tocap.slice(1);\n\nconst EditableCell = ({\n    editing,\n    dataIndex,\n    title,\n    inputType,\n    record,\n    index,\n    children,\n    ...restProps\n}) => {\n    const inputNode = inputType === \"number\" ? <InputNumber /> : <Input />;\n    return (\n        <td {...restProps}>\n            {editing ? (\n                <Form.Item\n                    name={dataIndex}\n                    style={{\n                        margin: 0,\n                    }}\n                    rules={[\n                        {\n                            required: true,\n                            message: `Please Input ${title}!`,\n                        },\n                    ]}\n                >\n                    {inputNode}\n                </Form.Item>\n            ) : (\n                children\n            )}\n        </td>\n    );\n};\n\nexport default function BudgetPage(props) {\n    console.log(props.data[props.step]);\n\n    let newObj = props.data[props.step].items[0];\n    const columnNames = Object.keys(newObj).filter(\n        (key) => key !== \"key\" && key !== \"children\"\n    );\n    let columns = columnNames.map((key) => ({\n        title: capitalize(key),\n        dataIndex: key,\n        inputType: key === \"name\" ? \"text\" : \"number\",\n        key: key,\n    }));\n\n    const [form] = Form.useForm();\n    // const [data, setData] = useState(props);\n    const [editingKey, setEditingKey] = useState(\"\");\n\n    const isEditing = (record) => record.key === editingKey;\n\n    let columnFieldsValues = {};\n    columnNames.forEach((name) => (columnFieldsValues[name] = \"\"));\n\n    const edit = (record) => {\n        form.setFieldsValue({\n            columnFieldsValues,\n            ...record,\n        });\n        console.log(columnFieldsValues);\n        setEditingKey(record.key);\n    };\n\n    const cancel = () => {\n        setEditingKey(\"\");\n    };\n\n    const save = async (key) => {\n        try {\n            const row = await form.validateFields();\n            const newData = [...props.data];\n            const index = newData.findIndex((item) => key === item.key);\n\n            if (index > -1) {\n                const item = newData[index];\n                newData.splice(index, 1, { ...item, ...row });\n                props.setData(newData);\n                setEditingKey(\"\");\n            } else {\n                newData.push(row);\n                props.setData(newData);\n                setEditingKey(\"\");\n            }\n        } catch (errInfo) {\n            console.log(\"Validate Failed:\", errInfo);\n        }\n    };\n\n    columns.push({\n        title: \"operation\",\n        dataIndex: \"operation\",\n        render: (_, record) => {\n            const editable = isEditing(record);\n            return editable ? (\n                <span>\n                    <Button\n                        type=\"primary\"\n                        onClick={() => save(record.key)}\n                        style={{\n                            marginRight: 8,\n                        }}\n                    >\n                        Save\n                    </Button>\n                    <Popconfirm title=\"Sure to cancel?\" onConfirm={cancel}>\n                        <Button type=\"link\">Cancel</Button>\n                    </Popconfirm>\n                </span>\n            ) : (\n                <Button\n                    type=\"link\"\n                    disabled={editingKey !== \"\"}\n                    onClick={() => edit(record)}\n                >\n                    Edit\n                </Button>\n            );\n        },\n    });\n    console.log(columns);\n    return (\n        <div className={styles.content}>\n            <h1>{props.data[props.step].label}</h1>\n            <Form form={form} component={false}>\n                <Table\n                    components={{\n                        body: {\n                            cell: EditableCell,\n                        },\n                    }}\n                    bordered\n                    dataSource={props.data[props.step].items}\n                    columns={columns}\n                    summary={(items) => {\n                        let total = 0;\n                        items.forEach((item) => {});\n                    }}\n                ></Table>\n            </Form>\n        </div>\n    );\n}\n","import React from \"react\";\n\nimport ExportCSV from \"../../components/ExportCSV\";\nimport BudgetSteps from \"../../components/BudgetSteps\";\nimport BudgetPage from \"../BudgetPage\";\n\nimport styles from \"./Main.module.scss\";\nimport { Layout, Col, Row } from \"antd\";\nconst { Content } = Layout;\n\nexport default function Main(props) {\n    console.log(props.data);\n    return (\n        <Content>\n            <Row className={styles.row}>\n                <Col\n                    span={5}\n                    pull={5}\n                    style={{\n                        height: \"100vh\",\n                        position: \"fixed\",\n                        left: 0,\n                        backgroundColor: \"white\",\n                        top: \"64px\",\n                        zIndex: 2,\n                        minWidth: \"17px\",\n                    }}\n                >\n                    <BudgetSteps onChange={props.onChange} page={props.step} />\n                </Col>\n                <Col span={19} push={5} style={{ textAlign: \"center\" }}>\n                    <BudgetPage\n                        data={props.data}\n                        step={props.step}\n                        setData={props.setData}\n                    />\n                    {props.step + 1 === props.data.length && (\n                        <ExportCSV csvData={props.data} fileName={\"Pricing and Budget\"} />\n                    )}\n                </Col>\n            </Row>\n        </Content>\n    );\n}\n","import React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nimport Main from \"./pages/Main\";\nimport { Layout } from \"antd\";\nconst { Header } = Layout;\n\nlet defaultData = require(\"./utils/default.json\");\nconst useSessionState = (storageKey) => {\n    const [data, setData] = useState(\n        JSON.parse(sessionStorage.getItem(storageKey)) || defaultData\n    );\n    useEffect(() => {\n        const stringData = JSON.stringify(data);\n        sessionStorage.setItem(storageKey, stringData);\n    }, [data, storageKey]);\n    return [data, setData];\n};\n\nfunction App() {\n    const [step, setStep] = useState(0);\n    const onChange = (current) => setStep(current);\n    const [data, setData] = useSessionState(\"VLProjectBudget\");\n    return (\n        <Layout>\n            <Header\n                style={{\n                    position: \"fixed\",\n                    zIndex: 2,\n                    width: \"100%\",\n                    textAlign: \"center\",\n                }}\n            >\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            </Header>\n            <Layout>\n                <Main step={step} data={data} setData={setData} onChange={onChange} />\n            </Layout>\n        </Layout>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}